/*
 * FRISS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Objekt;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.swagger.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(AdditionalFieldsBase.class, new TypeSelector<AdditionalFieldsBase>() {
            @Override
            public Class<? extends AdditionalFieldsBase> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AdditionalFieldsBase>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AdditionalFieldsAndNotesBase".toUpperCase(), AdditionalFieldsAndNotesBase.class);
                    classByDiscriminatorValue.put("Address".toUpperCase(), Address.class);
                    classByDiscriminatorValue.put("BankAccount".toUpperCase(), BankAccount.class);
                    classByDiscriminatorValue.put("ClaimScreeningRequestOfAutoPolicy".toUpperCase(), ClaimScreeningRequestOfAutoPolicy.class);
                    classByDiscriminatorValue.put("ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy".toUpperCase(), ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy.class);
                    classByDiscriminatorValue.put("ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy".toUpperCase(), ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy.class);
                    classByDiscriminatorValue.put("ClaimScreeningRequestOfHealthPolicy".toUpperCase(), ClaimScreeningRequestOfHealthPolicy.class);
                    classByDiscriminatorValue.put("ClaimScreeningRequestOfHomePolicy".toUpperCase(), ClaimScreeningRequestOfHomePolicy.class);
                    classByDiscriminatorValue.put("ClaimScreeningRequestOfPolicy".toUpperCase(), ClaimScreeningRequestOfPolicy.class);
                    classByDiscriminatorValue.put("Contact".toUpperCase(), Contact.class);
                    classByDiscriminatorValue.put("Coverage".toUpperCase(), Coverage.class);
                    classByDiscriminatorValue.put("Identification".toUpperCase(), Identification.class);
                    classByDiscriminatorValue.put("LegalEntity".toUpperCase(), LegalEntity.class);
                    classByDiscriminatorValue.put("LegalEntityRefOfCompany".toUpperCase(), LegalEntityRefOfCompany.class);
                    classByDiscriminatorValue.put("LegalEntityRefOfLegalEntity".toUpperCase(), LegalEntityRefOfLegalEntity.class);
                    classByDiscriminatorValue.put("LegalEntityRefOfPerson".toUpperCase(), LegalEntityRefOfPerson.class);
                    classByDiscriminatorValue.put("Location".toUpperCase(), Location.class);
                    classByDiscriminatorValue.put("Note".toUpperCase(), Note.class);
                    classByDiscriminatorValue.put("Object".toUpperCase(), Objekt.class);
                    classByDiscriminatorValue.put("ObjectInsured".toUpperCase(), ObjectInsured.class);
                    classByDiscriminatorValue.put("Policy".toUpperCase(), Policy.class);
                    classByDiscriminatorValue.put("PolicyChange".toUpperCase(), PolicyChange.class);
                    classByDiscriminatorValue.put("ThirdParty".toUpperCase(), ThirdParty.class);
                    classByDiscriminatorValue.put("AdditionalFieldsBase".toUpperCase(), AdditionalFieldsBase.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AdditionalFieldsBase.class, new PostProcessor<AdditionalFieldsBase>() {
              @Override
              public void postDeserialize(AdditionalFieldsBase result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AdditionalFieldsBase src, Gson gson) {
                  Map<Class<? extends AdditionalFieldsBase>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AdditionalFieldsAndNotesBase.class, "AdditionalFieldsAndNotesBase");
                      discriminatorValueByClass.put(Address.class, "Address");
                      discriminatorValueByClass.put(BankAccount.class, "BankAccount");
                      discriminatorValueByClass.put(ClaimScreeningRequestOfAutoPolicy.class, "ClaimScreeningRequestOfAutoPolicy");
                      discriminatorValueByClass.put(ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy.class, "ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy");
                      discriminatorValueByClass.put(ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy.class, "ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy");
                      discriminatorValueByClass.put(ClaimScreeningRequestOfHealthPolicy.class, "ClaimScreeningRequestOfHealthPolicy");
                      discriminatorValueByClass.put(ClaimScreeningRequestOfHomePolicy.class, "ClaimScreeningRequestOfHomePolicy");
                      discriminatorValueByClass.put(ClaimScreeningRequestOfPolicy.class, "ClaimScreeningRequestOfPolicy");
                      discriminatorValueByClass.put(Contact.class, "Contact");
                      discriminatorValueByClass.put(Coverage.class, "Coverage");
                      discriminatorValueByClass.put(Identification.class, "Identification");
                      discriminatorValueByClass.put(LegalEntity.class, "LegalEntity");
                      discriminatorValueByClass.put(LegalEntityRefOfCompany.class, "LegalEntityRefOfCompany");
                      discriminatorValueByClass.put(LegalEntityRefOfLegalEntity.class, "LegalEntityRefOfLegalEntity");
                      discriminatorValueByClass.put(LegalEntityRefOfPerson.class, "LegalEntityRefOfPerson");
                      discriminatorValueByClass.put(Location.class, "Location");
                      discriminatorValueByClass.put(Note.class, "Note");
                      discriminatorValueByClass.put(Objekt.class, "Object");
                      discriminatorValueByClass.put(ObjectInsured.class, "ObjectInsured");
                      discriminatorValueByClass.put(Policy.class, "Policy");
                      discriminatorValueByClass.put(PolicyChange.class, "PolicyChange");
                      discriminatorValueByClass.put(ThirdParty.class, "ThirdParty");
                      discriminatorValueByClass.put(AdditionalFieldsBase.class, "AdditionalFieldsBase");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Policy.class, new TypeSelector<Policy>() {
            @Override
            public Class<? extends Policy> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Policy>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AutoPolicy".toUpperCase(), AutoPolicy.class);
                    classByDiscriminatorValue.put("GeneralLiabilityCommercialPolicy".toUpperCase(), GeneralLiabilityCommercialPolicy.class);
                    classByDiscriminatorValue.put("GeneralLiabilityPrivatePolicy".toUpperCase(), GeneralLiabilityPrivatePolicy.class);
                    classByDiscriminatorValue.put("HealthPolicy".toUpperCase(), HealthPolicy.class);
                    classByDiscriminatorValue.put("HomePolicy".toUpperCase(), HomePolicy.class);
                    classByDiscriminatorValue.put("Policy".toUpperCase(), Policy.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(Policy.class, new PostProcessor<Policy>() {
              @Override
              public void postDeserialize(Policy result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Policy src, Gson gson) {
                  Map<Class<? extends Policy>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AutoPolicy.class, "AutoPolicy");
                      discriminatorValueByClass.put(GeneralLiabilityCommercialPolicy.class, "GeneralLiabilityCommercialPolicy");
                      discriminatorValueByClass.put(GeneralLiabilityPrivatePolicy.class, "GeneralLiabilityPrivatePolicy");
                      discriminatorValueByClass.put(HealthPolicy.class, "HealthPolicy");
                      discriminatorValueByClass.put(HomePolicy.class, "HomePolicy");
                      discriminatorValueByClass.put(Policy.class, "Policy");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AdditionalFieldsAndNotesBase.class, new TypeSelector<AdditionalFieldsAndNotesBase>() {
            @Override
            public Class<? extends AdditionalFieldsAndNotesBase> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AdditionalFieldsAndNotesBase>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ClaimOfAutoPolicy".toUpperCase(), ClaimOfAutoPolicy.class);
                    classByDiscriminatorValue.put("ClaimOfGeneralLiabilityCommercialPolicy".toUpperCase(), ClaimOfGeneralLiabilityCommercialPolicy.class);
                    classByDiscriminatorValue.put("ClaimOfGeneralLiabilityPrivatePolicy".toUpperCase(), ClaimOfGeneralLiabilityPrivatePolicy.class);
                    classByDiscriminatorValue.put("ClaimOfHealthPolicy".toUpperCase(), ClaimOfHealthPolicy.class);
                    classByDiscriminatorValue.put("ClaimOfHomePolicy".toUpperCase(), ClaimOfHomePolicy.class);
                    classByDiscriminatorValue.put("ClaimOfPolicy".toUpperCase(), ClaimOfPolicy.class);
                    classByDiscriminatorValue.put("SubClaim".toUpperCase(), SubClaim.class);
                    classByDiscriminatorValue.put("AdditionalFieldsAndNotesBase".toUpperCase(), AdditionalFieldsAndNotesBase.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AdditionalFieldsAndNotesBase.class, new PostProcessor<AdditionalFieldsAndNotesBase>() {
              @Override
              public void postDeserialize(AdditionalFieldsAndNotesBase result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AdditionalFieldsAndNotesBase src, Gson gson) {
                  Map<Class<? extends AdditionalFieldsAndNotesBase>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ClaimOfAutoPolicy.class, "ClaimOfAutoPolicy");
                      discriminatorValueByClass.put(ClaimOfGeneralLiabilityCommercialPolicy.class, "ClaimOfGeneralLiabilityCommercialPolicy");
                      discriminatorValueByClass.put(ClaimOfGeneralLiabilityPrivatePolicy.class, "ClaimOfGeneralLiabilityPrivatePolicy");
                      discriminatorValueByClass.put(ClaimOfHealthPolicy.class, "ClaimOfHealthPolicy");
                      discriminatorValueByClass.put(ClaimOfHomePolicy.class, "ClaimOfHomePolicy");
                      discriminatorValueByClass.put(ClaimOfPolicy.class, "ClaimOfPolicy");
                      discriminatorValueByClass.put(SubClaim.class, "SubClaim");
                      discriminatorValueByClass.put(AdditionalFieldsAndNotesBase.class, "AdditionalFieldsAndNotesBase");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LegalEntity.class, new TypeSelector<LegalEntity>() {
            @Override
            public Class<? extends LegalEntity> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LegalEntity>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("Company".toUpperCase(), Company.class);
                    classByDiscriminatorValue.put("Person".toUpperCase(), Person.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "discriminator"));
            }
          })
          .registerPostProcessor(LegalEntity.class, new PostProcessor<LegalEntity>() {
              @Override
              public void postDeserialize(LegalEntity result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LegalEntity src, Gson gson) {
                  Map<Class<? extends LegalEntity>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(Company.class, "Company");
                      discriminatorValueByClass.put(Person.class, "Person");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("discriminator"))
                      {
                          ((JsonObject) result).addProperty("discriminator", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(LegalEntityRefOfLegalEntity.class, new TypeSelector<LegalEntityRefOfLegalEntity>() {
            @Override
            public Class<? extends LegalEntityRefOfLegalEntity> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends LegalEntityRefOfLegalEntity>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("LegalEntityRef".toUpperCase(), LegalEntityRef.class);
                    classByDiscriminatorValue.put("LegalEntityRefOfLegalEntity".toUpperCase(), LegalEntityRefOfLegalEntity.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(LegalEntityRefOfLegalEntity.class, new PostProcessor<LegalEntityRefOfLegalEntity>() {
              @Override
              public void postDeserialize(LegalEntityRefOfLegalEntity result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, LegalEntityRefOfLegalEntity src, Gson gson) {
                  Map<Class<? extends LegalEntityRefOfLegalEntity>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(LegalEntityRef.class, "LegalEntityRef");
                      discriminatorValueByClass.put(LegalEntityRefOfLegalEntity.class, "LegalEntityRefOfLegalEntity");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Objekt.class, new TypeSelector<Objekt>() {
            @Override
            public Class<? extends Objekt> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Objekt>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("Vehicle".toUpperCase(), Vehicle.class);
                    classByDiscriminatorValue.put("Property".toUpperCase(), Property.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "discriminator"));
            }
          })
          .registerPostProcessor(Objekt.class, new PostProcessor<Objekt>() {
              @Override
              public void postDeserialize(Objekt result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Objekt src, Gson gson) {
                  Map<Class<? extends Objekt>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(Vehicle.class, "Vehicle");
                      discriminatorValueByClass.put(Property.class, "Property");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("discriminator"))
                      {
                          ((JsonObject) result).addProperty("discriminator", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SubClaim.class, new TypeSelector<SubClaim>() {
            @Override
            public Class<? extends SubClaim> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SubClaim>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("SubClaimAutoDamage".toUpperCase(), SubClaimAutoDamage.class);
                    classByDiscriminatorValue.put("SubClaimInjury".toUpperCase(), SubClaimInjury.class);
                    classByDiscriminatorValue.put("SubClaimAccidentBenefit".toUpperCase(), SubClaimAccidentBenefit.class);
                    classByDiscriminatorValue.put("SubClaimContentDamage".toUpperCase(), SubClaimContentDamage.class);
                    classByDiscriminatorValue.put("SubClaimPropertyDamage".toUpperCase(), SubClaimPropertyDamage.class);
                    classByDiscriminatorValue.put("SubClaimAutoInvolved".toUpperCase(), SubClaimAutoInvolved.class);
                    classByDiscriminatorValue.put("SubClaimMedical".toUpperCase(), SubClaimMedical.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "discriminator"));
            }
          })
          .registerPostProcessor(SubClaim.class, new PostProcessor<SubClaim>() {
              @Override
              public void postDeserialize(SubClaim result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SubClaim src, Gson gson) {
                  Map<Class<? extends SubClaim>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(SubClaimAutoDamage.class, "SubClaimAutoDamage");
                      discriminatorValueByClass.put(SubClaimInjury.class, "SubClaimInjury");
                      discriminatorValueByClass.put(SubClaimAccidentBenefit.class, "SubClaimAccidentBenefit");
                      discriminatorValueByClass.put(SubClaimContentDamage.class, "SubClaimContentDamage");
                      discriminatorValueByClass.put(SubClaimPropertyDamage.class, "SubClaimPropertyDamage");
                      discriminatorValueByClass.put(SubClaimAutoInvolved.class, "SubClaimAutoInvolved");
                      discriminatorValueByClass.put(SubClaimMedical.class, "SubClaimMedical");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("discriminator"))
                      {
                          ((JsonObject) result).addProperty("discriminator", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Objekt obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
