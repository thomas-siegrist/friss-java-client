/*
 * FRISS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ClaimScreeningRequestOfAutoPolicy;
import io.swagger.client.model.ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy;
import io.swagger.client.model.ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy;
import io.swagger.client.model.ClaimScreeningRequestOfHealthPolicy;
import io.swagger.client.model.ClaimScreeningRequestOfHomePolicy;
import io.swagger.client.model.ClaimScreeningRequestOfPolicy;
import io.swagger.client.model.ClaimScreeningRequestResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DetectionVApi {
    private ApiClient apiClient;

    public DetectionVApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DetectionVApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for detectionVPost
     * @param body  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call detectionVPostCall(ClaimScreeningRequestOfPolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v{version}/detection/base"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call detectionVPostValidateBeforeCall(ClaimScreeningRequestOfPolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling detectionVPost(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling detectionVPost(Async)");
        }
        
        com.squareup.okhttp.Call call = detectionVPostCall(body, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ClaimScreeningRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClaimScreeningRequestResult detectionVPost(ClaimScreeningRequestOfPolicy body, String version) throws ApiException {
        ApiResponse<ClaimScreeningRequestResult> resp = detectionVPostWithHttpInfo(body, version);
        return resp.getData();
    }

    /**
     * Send a claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ApiResponse&lt;ClaimScreeningRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClaimScreeningRequestResult> detectionVPostWithHttpInfo(ClaimScreeningRequestOfPolicy body, String version) throws ApiException {
        com.squareup.okhttp.Call call = detectionVPostValidateBeforeCall(body, version, null, null);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send a claim request to detection. (asynchronously)
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectionVPostAsync(ClaimScreeningRequestOfPolicy body, String version, final ApiCallback<ClaimScreeningRequestResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectionVPostValidateBeforeCall(body, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for detectionVPost2
     * @param body  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call detectionVPost2Call(ClaimScreeningRequestOfAutoPolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v{version}/detection/auto"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call detectionVPost2ValidateBeforeCall(ClaimScreeningRequestOfAutoPolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling detectionVPost2(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling detectionVPost2(Async)");
        }
        
        com.squareup.okhttp.Call call = detectionVPost2Call(body, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send auto claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ClaimScreeningRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClaimScreeningRequestResult detectionVPost2(ClaimScreeningRequestOfAutoPolicy body, String version) throws ApiException {
        ApiResponse<ClaimScreeningRequestResult> resp = detectionVPost2WithHttpInfo(body, version);
        return resp.getData();
    }

    /**
     * Send auto claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ApiResponse&lt;ClaimScreeningRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClaimScreeningRequestResult> detectionVPost2WithHttpInfo(ClaimScreeningRequestOfAutoPolicy body, String version) throws ApiException {
        com.squareup.okhttp.Call call = detectionVPost2ValidateBeforeCall(body, version, null, null);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send auto claim request to detection. (asynchronously)
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectionVPost2Async(ClaimScreeningRequestOfAutoPolicy body, String version, final ApiCallback<ClaimScreeningRequestResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectionVPost2ValidateBeforeCall(body, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for detectionVPost3
     * @param body  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call detectionVPost3Call(ClaimScreeningRequestOfHomePolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v{version}/detection/home"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call detectionVPost3ValidateBeforeCall(ClaimScreeningRequestOfHomePolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling detectionVPost3(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling detectionVPost3(Async)");
        }
        
        com.squareup.okhttp.Call call = detectionVPost3Call(body, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send home claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ClaimScreeningRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClaimScreeningRequestResult detectionVPost3(ClaimScreeningRequestOfHomePolicy body, String version) throws ApiException {
        ApiResponse<ClaimScreeningRequestResult> resp = detectionVPost3WithHttpInfo(body, version);
        return resp.getData();
    }

    /**
     * Send home claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ApiResponse&lt;ClaimScreeningRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClaimScreeningRequestResult> detectionVPost3WithHttpInfo(ClaimScreeningRequestOfHomePolicy body, String version) throws ApiException {
        com.squareup.okhttp.Call call = detectionVPost3ValidateBeforeCall(body, version, null, null);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send home claim request to detection. (asynchronously)
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectionVPost3Async(ClaimScreeningRequestOfHomePolicy body, String version, final ApiCallback<ClaimScreeningRequestResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectionVPost3ValidateBeforeCall(body, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for detectionVPost4
     * @param body  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call detectionVPost4Call(ClaimScreeningRequestOfHealthPolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v{version}/detection/health"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call detectionVPost4ValidateBeforeCall(ClaimScreeningRequestOfHealthPolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling detectionVPost4(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling detectionVPost4(Async)");
        }
        
        com.squareup.okhttp.Call call = detectionVPost4Call(body, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send health claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ClaimScreeningRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClaimScreeningRequestResult detectionVPost4(ClaimScreeningRequestOfHealthPolicy body, String version) throws ApiException {
        ApiResponse<ClaimScreeningRequestResult> resp = detectionVPost4WithHttpInfo(body, version);
        return resp.getData();
    }

    /**
     * Send health claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ApiResponse&lt;ClaimScreeningRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClaimScreeningRequestResult> detectionVPost4WithHttpInfo(ClaimScreeningRequestOfHealthPolicy body, String version) throws ApiException {
        com.squareup.okhttp.Call call = detectionVPost4ValidateBeforeCall(body, version, null, null);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send health claim request to detection. (asynchronously)
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectionVPost4Async(ClaimScreeningRequestOfHealthPolicy body, String version, final ApiCallback<ClaimScreeningRequestResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectionVPost4ValidateBeforeCall(body, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for detectionVPost5
     * @param body  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call detectionVPost5Call(ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v{version}/detection/gl/commercial"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call detectionVPost5ValidateBeforeCall(ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling detectionVPost5(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling detectionVPost5(Async)");
        }
        
        com.squareup.okhttp.Call call = detectionVPost5Call(body, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send general liability commercial claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ClaimScreeningRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClaimScreeningRequestResult detectionVPost5(ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy body, String version) throws ApiException {
        ApiResponse<ClaimScreeningRequestResult> resp = detectionVPost5WithHttpInfo(body, version);
        return resp.getData();
    }

    /**
     * Send general liability commercial claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ApiResponse&lt;ClaimScreeningRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClaimScreeningRequestResult> detectionVPost5WithHttpInfo(ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy body, String version) throws ApiException {
        com.squareup.okhttp.Call call = detectionVPost5ValidateBeforeCall(body, version, null, null);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send general liability commercial claim request to detection. (asynchronously)
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectionVPost5Async(ClaimScreeningRequestOfGeneralLiabilityCommercialPolicy body, String version, final ApiCallback<ClaimScreeningRequestResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectionVPost5ValidateBeforeCall(body, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for detectionVPost6
     * @param body  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call detectionVPost6Call(ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v{version}/detection/gl/private"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call detectionVPost6ValidateBeforeCall(ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy body, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling detectionVPost6(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling detectionVPost6(Async)");
        }
        
        com.squareup.okhttp.Call call = detectionVPost6Call(body, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send general liability private claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ClaimScreeningRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClaimScreeningRequestResult detectionVPost6(ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy body, String version) throws ApiException {
        ApiResponse<ClaimScreeningRequestResult> resp = detectionVPost6WithHttpInfo(body, version);
        return resp.getData();
    }

    /**
     * Send general liability private claim request to detection.
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @return ApiResponse&lt;ClaimScreeningRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClaimScreeningRequestResult> detectionVPost6WithHttpInfo(ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy body, String version) throws ApiException {
        com.squareup.okhttp.Call call = detectionVPost6ValidateBeforeCall(body, version, null, null);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send general liability private claim request to detection. (asynchronously)
     * Send claim to detection.
     * @param body  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectionVPost6Async(ClaimScreeningRequestOfGeneralLiabilityPrivatePolicy body, String version, final ApiCallback<ClaimScreeningRequestResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectionVPost6ValidateBeforeCall(body, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClaimScreeningRequestResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
