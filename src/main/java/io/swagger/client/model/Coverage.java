/*
 * FRISS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AdditionalFieldsBase;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
/**
 * Coverage
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-03T11:30:23.717Z[GMT]")
public class Coverage extends AdditionalFieldsBase {
  @SerializedName("type")
  private String type = null;

  @SerializedName("insuredAmount")
  private BigDecimal insuredAmount = null;

  @SerializedName("amountExcess")
  private BigDecimal amountExcess = null;

  @SerializedName("annualPremium")
  private BigDecimal annualPremium = null;

  public Coverage type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of coverage
   * @return type
  **/
  @Schema(description = "The type of coverage")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Coverage insuredAmount(BigDecimal insuredAmount) {
    this.insuredAmount = insuredAmount;
    return this;
  }

   /**
   * The insured amount for this coverage
   * @return insuredAmount
  **/
  @Schema(description = "The insured amount for this coverage")
  public BigDecimal getInsuredAmount() {
    return insuredAmount;
  }

  public void setInsuredAmount(BigDecimal insuredAmount) {
    this.insuredAmount = insuredAmount;
  }

  public Coverage amountExcess(BigDecimal amountExcess) {
    this.amountExcess = amountExcess;
    return this;
  }

   /**
   * The amount of claimed damages paid by the insured person before the coverage on this policy pays out (also known as &#x27;Own risk&#x27;)
   * @return amountExcess
  **/
  @Schema(description = "The amount of claimed damages paid by the insured person before the coverage on this policy pays out (also known as 'Own risk')")
  public BigDecimal getAmountExcess() {
    return amountExcess;
  }

  public void setAmountExcess(BigDecimal amountExcess) {
    this.amountExcess = amountExcess;
  }

  public Coverage annualPremium(BigDecimal annualPremium) {
    this.annualPremium = annualPremium;
    return this;
  }

   /**
   * The annual premium of the coverage
   * @return annualPremium
  **/
  @Schema(description = "The annual premium of the coverage")
  public BigDecimal getAnnualPremium() {
    return annualPremium;
  }

  public void setAnnualPremium(BigDecimal annualPremium) {
    this.annualPremium = annualPremium;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Coverage coverage = (Coverage) o;
    return Objects.equals(this.type, coverage.type) &&
        Objects.equals(this.insuredAmount, coverage.insuredAmount) &&
        Objects.equals(this.amountExcess, coverage.amountExcess) &&
        Objects.equals(this.annualPremium, coverage.annualPremium) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, insuredAmount, amountExcess, annualPremium, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Coverage {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    insuredAmount: ").append(toIndentedString(insuredAmount)).append("\n");
    sb.append("    amountExcess: ").append(toIndentedString(amountExcess)).append("\n");
    sb.append("    annualPremium: ").append(toIndentedString(annualPremium)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
