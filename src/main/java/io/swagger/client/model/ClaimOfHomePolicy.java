/*
 * FRISS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * ClaimOfHomePolicy
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-03T11:30:23.717Z[GMT]")
public class ClaimOfHomePolicy extends AdditionalFieldsAndNotesBase {
  @SerializedName("policy")
  private Objekt policy = null;

  @SerializedName("witnesses")
  private List<LegalEntityRef> witnesses = null;

  @SerializedName("reporters")
  private List<LegalEntityRef> reporters = null;

  @SerializedName("claimants")
  private List<LegalEntityRef> claimants = null;

  @SerializedName("subClaims")
  private List<SubClaim> subClaims = null;

  @SerializedName("address")
  private Objekt address = null;

  @SerializedName("reportType")
  private String reportType = null;

  @SerializedName("numberOfVehicles")
  private Integer numberOfVehicles = null;

  @SerializedName("numberOfThirdParties")
  private Integer numberOfThirdParties = null;

  @SerializedName("numberOfInjured")
  private Integer numberOfInjured = null;

  @SerializedName("incidentId")
  private String incidentId = null;

  @SerializedName("flag")
  private List<String> flag = null;

  @SerializedName("compensationType")
  private String compensationType = null;

  @SerializedName("amountRecovered")
  private BigDecimal amountRecovered = null;

  @SerializedName("amountPaid")
  private BigDecimal amountPaid = null;

  @SerializedName("status")
  private Objekt status = null;

  @SerializedName("handler")
  private String handler = null;

  @SerializedName("statement")
  private String statement = null;

  @SerializedName("damageAmount")
  private Integer damageAmount = null;

  @SerializedName("damageList")
  private List<String> damageList = null;

  @SerializedName("damageType")
  private String damageType = null;

  @SerializedName("accidentType")
  private String accidentType = null;

  @SerializedName("liability")
  private Integer liability = null;

  @SerializedName("cause")
  private String cause = null;

  @SerializedName("amountReserved")
  private BigDecimal amountReserved = null;

  @SerializedName("reportedDate")
  private OffsetDateTime reportedDate = null;

  @SerializedName("occurredDate")
  private OffsetDateTime occurredDate = null;

  @SerializedName("claimId")
  private String claimId = null;

  @SerializedName("timeOccurred")
  private String timeOccurred = null;

  @SerializedName("timeReported")
  private String timeReported = null;

  @SerializedName("policeInvolved")
  private Boolean policeInvolved = null;

  @SerializedName("recoveryClaim")
  private Boolean recoveryClaim = null;

  @SerializedName("amountClaimed")
  private BigDecimal amountClaimed = null;

  @SerializedName("reopenDate")
  private OffsetDateTime reopenDate = null;

  @SerializedName("closingDate")
  private OffsetDateTime closingDate = null;

  @SerializedName("damageCauser")
  private String damageCauser = null;

  @SerializedName("withdrawalReason")
  private Objekt withdrawalReason = null;

  @SerializedName("faultRating")
  private String faultRating = null;

  @SerializedName("closedOutcome")
  private String closedOutcome = null;

  @SerializedName("thirdParties")
  private List<ThirdParty> thirdParties = null;

  @SerializedName("staffAppraisers")
  private List<String> staffAppraisers = null;

  @SerializedName("custodians")
  private List<LegalEntityRef> custodians = null;

  @SerializedName("adverseParties")
  private List<LegalEntityRef> adverseParties = null;

  @SerializedName("vendors")
  private List<LegalEntityRef> vendors = null;

  @SerializedName("pedestrians")
  private List<LegalEntityRefOfPerson> pedestrians = null;

  public ClaimOfHomePolicy policy(Objekt policy) {
    this.policy = policy;
    return this;
  }

   /**
   * The policy involved in the claim, described as a [Policy](#policy) Entity
   * @return policy
  **/
  @Schema(description = "The policy involved in the claim, described as a [Policy](#policy) Entity")
  public Objekt getPolicy() {
    return policy;
  }

  public void setPolicy(Objekt policy) {
    this.policy = policy;
  }

  public ClaimOfHomePolicy witnesses(List<LegalEntityRef> witnesses) {
    this.witnesses = witnesses;
    return this;
  }

  public ClaimOfHomePolicy addWitnessesItem(LegalEntityRef witnessesItem) {
    if (this.witnesses == null) {
      this.witnesses = new ArrayList<LegalEntityRef>();
    }
    this.witnesses.add(witnessesItem);
    return this;
  }

   /**
   * An array of references to the witness(es) of the claim
   * @return witnesses
  **/
  @Schema(description = "An array of references to the witness(es) of the claim")
  public List<LegalEntityRef> getWitnesses() {
    return witnesses;
  }

  public void setWitnesses(List<LegalEntityRef> witnesses) {
    this.witnesses = witnesses;
  }

  public ClaimOfHomePolicy reporters(List<LegalEntityRef> reporters) {
    this.reporters = reporters;
    return this;
  }

  public ClaimOfHomePolicy addReportersItem(LegalEntityRef reportersItem) {
    if (this.reporters == null) {
      this.reporters = new ArrayList<LegalEntityRef>();
    }
    this.reporters.add(reportersItem);
    return this;
  }

   /**
   * An array of references to the reporter(s) of the claim
   * @return reporters
  **/
  @Schema(description = "An array of references to the reporter(s) of the claim")
  public List<LegalEntityRef> getReporters() {
    return reporters;
  }

  public void setReporters(List<LegalEntityRef> reporters) {
    this.reporters = reporters;
  }

  public ClaimOfHomePolicy claimants(List<LegalEntityRef> claimants) {
    this.claimants = claimants;
    return this;
  }

  public ClaimOfHomePolicy addClaimantsItem(LegalEntityRef claimantsItem) {
    if (this.claimants == null) {
      this.claimants = new ArrayList<LegalEntityRef>();
    }
    this.claimants.add(claimantsItem);
    return this;
  }

   /**
   * An array of references to the claimant(s)
   * @return claimants
  **/
  @Schema(description = "An array of references to the claimant(s)")
  public List<LegalEntityRef> getClaimants() {
    return claimants;
  }

  public void setClaimants(List<LegalEntityRef> claimants) {
    this.claimants = claimants;
  }

  public ClaimOfHomePolicy subClaims(List<SubClaim> subClaims) {
    this.subClaims = subClaims;
    return this;
  }

  public ClaimOfHomePolicy addSubClaimsItem(SubClaim subClaimsItem) {
    if (this.subClaims == null) {
      this.subClaims = new ArrayList<SubClaim>();
    }
    this.subClaims.add(subClaimsItem);
    return this;
  }

   /**
   * An array of subclaims associated with this claim
   * @return subClaims
  **/
  @Schema(description = "An array of subclaims associated with this claim")
  public List<SubClaim> getSubClaims() {
    return subClaims;
  }

  public void setSubClaims(List<SubClaim> subClaims) {
    this.subClaims = subClaims;
  }

  public ClaimOfHomePolicy address(Objekt address) {
    this.address = address;
    return this;
  }

   /**
   * The location of the claim, described as an [Address](#address) Entity
   * @return address
  **/
  @Schema(description = "The location of the claim, described as an [Address](#address) Entity")
  public Objekt getAddress() {
    return address;
  }

  public void setAddress(Objekt address) {
    this.address = address;
  }

  public ClaimOfHomePolicy reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

   /**
   * The way the claim was reported at the insurance company
   * @return reportType
  **/
  @Schema(description = "The way the claim was reported at the insurance company")
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }

  public ClaimOfHomePolicy numberOfVehicles(Integer numberOfVehicles) {
    this.numberOfVehicles = numberOfVehicles;
    return this;
  }

   /**
   * The total number of vehicles involved in the claim, including own vehicle
   * @return numberOfVehicles
  **/
  @Schema(description = "The total number of vehicles involved in the claim, including own vehicle")
  public Integer getNumberOfVehicles() {
    return numberOfVehicles;
  }

  public void setNumberOfVehicles(Integer numberOfVehicles) {
    this.numberOfVehicles = numberOfVehicles;
  }

  public ClaimOfHomePolicy numberOfThirdParties(Integer numberOfThirdParties) {
    this.numberOfThirdParties = numberOfThirdParties;
    return this;
  }

   /**
   * The number of Third Parties involved in the claim.
   * @return numberOfThirdParties
  **/
  @Schema(description = "The number of Third Parties involved in the claim.")
  public Integer getNumberOfThirdParties() {
    return numberOfThirdParties;
  }

  public void setNumberOfThirdParties(Integer numberOfThirdParties) {
    this.numberOfThirdParties = numberOfThirdParties;
  }

  public ClaimOfHomePolicy numberOfInjured(Integer numberOfInjured) {
    this.numberOfInjured = numberOfInjured;
    return this;
  }

   /**
   * The number of injured people involved in the claim. In case no one is injured just fill this with 0
   * @return numberOfInjured
  **/
  @Schema(description = "The number of injured people involved in the claim. In case no one is injured just fill this with 0")
  public Integer getNumberOfInjured() {
    return numberOfInjured;
  }

  public void setNumberOfInjured(Integer numberOfInjured) {
    this.numberOfInjured = numberOfInjured;
  }

  public ClaimOfHomePolicy incidentId(String incidentId) {
    this.incidentId = incidentId;
    return this;
  }

   /**
   * A unique identifier for an incident linked to the claim
   * @return incidentId
  **/
  @Schema(description = "A unique identifier for an incident linked to the claim")
  public String getIncidentId() {
    return incidentId;
  }

  public void setIncidentId(String incidentId) {
    this.incidentId = incidentId;
  }

  public ClaimOfHomePolicy flag(List<String> flag) {
    this.flag = flag;
    return this;
  }

  public ClaimOfHomePolicy addFlagItem(String flagItem) {
    if (this.flag == null) {
      this.flag = new ArrayList<String>();
    }
    this.flag.add(flagItem);
    return this;
  }

   /**
   * A generic field to indicate whether the claim has been flagged by the insurer internally
   * @return flag
  **/
  @Schema(description = "A generic field to indicate whether the claim has been flagged by the insurer internally")
  public List<String> getFlag() {
    return flag;
  }

  public void setFlag(List<String> flag) {
    this.flag = flag;
  }

  public ClaimOfHomePolicy compensationType(String compensationType) {
    this.compensationType = compensationType;
    return this;
  }

   /**
   * The type of compensation for this claim
   * @return compensationType
  **/
  @Schema(description = "The type of compensation for this claim")
  public String getCompensationType() {
    return compensationType;
  }

  public void setCompensationType(String compensationType) {
    this.compensationType = compensationType;
  }

  public ClaimOfHomePolicy amountRecovered(BigDecimal amountRecovered) {
    this.amountRecovered = amountRecovered;
    return this;
  }

   /**
   * The amount recovered from a different party
   * @return amountRecovered
  **/
  @Schema(description = "The amount recovered from a different party")
  public BigDecimal getAmountRecovered() {
    return amountRecovered;
  }

  public void setAmountRecovered(BigDecimal amountRecovered) {
    this.amountRecovered = amountRecovered;
  }

  public ClaimOfHomePolicy amountPaid(BigDecimal amountPaid) {
    this.amountPaid = amountPaid;
    return this;
  }

   /**
   * The total amount paid
   * @return amountPaid
  **/
  @Schema(description = "The total amount paid")
  public BigDecimal getAmountPaid() {
    return amountPaid;
  }

  public void setAmountPaid(BigDecimal amountPaid) {
    this.amountPaid = amountPaid;
  }

  public ClaimOfHomePolicy status(Objekt status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the claim
   * @return status
  **/
  @Schema(description = "The status of the claim")
  public Objekt getStatus() {
    return status;
  }

  public void setStatus(Objekt status) {
    this.status = status;
  }

  public ClaimOfHomePolicy handler(String handler) {
    this.handler = handler;
    return this;
  }

   /**
   * [Deprecated]
   * @return handler
  **/
  @Schema(description = "[Deprecated]")
  public String getHandler() {
    return handler;
  }

  public void setHandler(String handler) {
    this.handler = handler;
  }

  public ClaimOfHomePolicy statement(String statement) {
    this.statement = statement;
    return this;
  }

   /**
   * The statement, as made by the policy holder or claimant
   * @return statement
  **/
  @Schema(description = "The statement, as made by the policy holder or claimant")
  public String getStatement() {
    return statement;
  }

  public void setStatement(String statement) {
    this.statement = statement;
  }

  public ClaimOfHomePolicy damageAmount(Integer damageAmount) {
    this.damageAmount = damageAmount;
    return this;
  }

   /**
   * The total value of claim related object damages
   * @return damageAmount
  **/
  @Schema(description = "The total value of claim related object damages")
  public Integer getDamageAmount() {
    return damageAmount;
  }

  public void setDamageAmount(Integer damageAmount) {
    this.damageAmount = damageAmount;
  }

  public ClaimOfHomePolicy damageList(List<String> damageList) {
    this.damageList = damageList;
    return this;
  }

  public ClaimOfHomePolicy addDamageListItem(String damageListItem) {
    if (this.damageList == null) {
      this.damageList = new ArrayList<String>();
    }
    this.damageList.add(damageListItem);
    return this;
  }

   /**
   * The list of damages to the insured object
   * @return damageList
  **/
  @Schema(description = "The list of damages to the insured object")
  public List<String> getDamageList() {
    return damageList;
  }

  public void setDamageList(List<String> damageList) {
    this.damageList = damageList;
  }

  public ClaimOfHomePolicy damageType(String damageType) {
    this.damageType = damageType;
    return this;
  }

   /**
   * The type of damage for the claim
   * @return damageType
  **/
  @Schema(description = "The type of damage for the claim")
  public String getDamageType() {
    return damageType;
  }

  public void setDamageType(String damageType) {
    this.damageType = damageType;
  }

  public ClaimOfHomePolicy accidentType(String accidentType) {
    this.accidentType = accidentType;
    return this;
  }

   /**
   * Get accidentType
   * @return accidentType
  **/
  @Schema(description = "")
  public String getAccidentType() {
    return accidentType;
  }

  public void setAccidentType(String accidentType) {
    this.accidentType = accidentType;
  }

  public ClaimOfHomePolicy liability(Integer liability) {
    this.liability = liability;
    return this;
  }

   /**
   * The percentage of liability. In case a percentage is unknown and only a yes-no-flag is available, these should be translated to 0 (not liable) or 100 (liable)
   * @return liability
  **/
  @Schema(description = "The percentage of liability. In case a percentage is unknown and only a yes-no-flag is available, these should be translated to 0 (not liable) or 100 (liable)")
  public Integer getLiability() {
    return liability;
  }

  public void setLiability(Integer liability) {
    this.liability = liability;
  }

  public ClaimOfHomePolicy cause(String cause) {
    this.cause = cause;
    return this;
  }

   /**
   * The direct cause of the damage
   * @return cause
  **/
  @Schema(description = "The direct cause of the damage")
  public String getCause() {
    return cause;
  }

  public void setCause(String cause) {
    this.cause = cause;
  }

  public ClaimOfHomePolicy amountReserved(BigDecimal amountReserved) {
    this.amountReserved = amountReserved;
    return this;
  }

   /**
   * The total amount reserved for the claim
   * @return amountReserved
  **/
  @Schema(description = "The total amount reserved for the claim")
  public BigDecimal getAmountReserved() {
    return amountReserved;
  }

  public void setAmountReserved(BigDecimal amountReserved) {
    this.amountReserved = amountReserved;
  }

  public ClaimOfHomePolicy reportedDate(OffsetDateTime reportedDate) {
    this.reportedDate = reportedDate;
    return this;
  }

   /**
   * The date when the claim has been reported
   * @return reportedDate
  **/
  @Schema(description = "The date when the claim has been reported")
  public OffsetDateTime getReportedDate() {
    return reportedDate;
  }

  public void setReportedDate(OffsetDateTime reportedDate) {
    this.reportedDate = reportedDate;
  }

  public ClaimOfHomePolicy occurredDate(OffsetDateTime occurredDate) {
    this.occurredDate = occurredDate;
    return this;
  }

   /**
   * The date when the accident occurred
   * @return occurredDate
  **/
  @Schema(description = "The date when the accident occurred")
  public OffsetDateTime getOccurredDate() {
    return occurredDate;
  }

  public void setOccurredDate(OffsetDateTime occurredDate) {
    this.occurredDate = occurredDate;
  }

  public ClaimOfHomePolicy claimId(String claimId) {
    this.claimId = claimId;
    return this;
  }

   /**
   * A mandatory field for the unique identifier of a claim
   * @return claimId
  **/
  @Schema(description = "A mandatory field for the unique identifier of a claim")
  public String getClaimId() {
    return claimId;
  }

  public void setClaimId(String claimId) {
    this.claimId = claimId;
  }

  public ClaimOfHomePolicy timeOccurred(String timeOccurred) {
    this.timeOccurred = timeOccurred;
    return this;
  }

   /**
   * The time when the accident occurred
   * @return timeOccurred
  **/
  @Schema(description = "The time when the accident occurred")
  public String getTimeOccurred() {
    return timeOccurred;
  }

  public void setTimeOccurred(String timeOccurred) {
    this.timeOccurred = timeOccurred;
  }

  public ClaimOfHomePolicy timeReported(String timeReported) {
    this.timeReported = timeReported;
    return this;
  }

   /**
   * The time when the claim was reported
   * @return timeReported
  **/
  @Schema(description = "The time when the claim was reported")
  public String getTimeReported() {
    return timeReported;
  }

  public void setTimeReported(String timeReported) {
    this.timeReported = timeReported;
  }

  public ClaimOfHomePolicy policeInvolved(Boolean policeInvolved) {
    this.policeInvolved = policeInvolved;
    return this;
  }

   /**
   * A boolean value indicating whether police was involved in the claim
   * @return policeInvolved
  **/
  @Schema(description = "A boolean value indicating whether police was involved in the claim")
  public Boolean isPoliceInvolved() {
    return policeInvolved;
  }

  public void setPoliceInvolved(Boolean policeInvolved) {
    this.policeInvolved = policeInvolved;
  }

  public ClaimOfHomePolicy recoveryClaim(Boolean recoveryClaim) {
    this.recoveryClaim = recoveryClaim;
    return this;
  }

   /**
   * Indicator if the claim is a &#x27;Recovery claim&#x27;
   * @return recoveryClaim
  **/
  @Schema(description = "Indicator if the claim is a 'Recovery claim'")
  public Boolean isRecoveryClaim() {
    return recoveryClaim;
  }

  public void setRecoveryClaim(Boolean recoveryClaim) {
    this.recoveryClaim = recoveryClaim;
  }

  public ClaimOfHomePolicy amountClaimed(BigDecimal amountClaimed) {
    this.amountClaimed = amountClaimed;
    return this;
  }

   /**
   * The amount claimed for the claim
   * @return amountClaimed
  **/
  @Schema(description = "The amount claimed for the claim")
  public BigDecimal getAmountClaimed() {
    return amountClaimed;
  }

  public void setAmountClaimed(BigDecimal amountClaimed) {
    this.amountClaimed = amountClaimed;
  }

  public ClaimOfHomePolicy reopenDate(OffsetDateTime reopenDate) {
    this.reopenDate = reopenDate;
    return this;
  }

   /**
   * The date at which the claim was reopened
   * @return reopenDate
  **/
  @Schema(description = "The date at which the claim was reopened")
  public OffsetDateTime getReopenDate() {
    return reopenDate;
  }

  public void setReopenDate(OffsetDateTime reopenDate) {
    this.reopenDate = reopenDate;
  }

  public ClaimOfHomePolicy closingDate(OffsetDateTime closingDate) {
    this.closingDate = closingDate;
    return this;
  }

   /**
   * The closing date of the claim
   * @return closingDate
  **/
  @Schema(description = "The closing date of the claim")
  public OffsetDateTime getClosingDate() {
    return closingDate;
  }

  public void setClosingDate(OffsetDateTime closingDate) {
    this.closingDate = closingDate;
  }

  public ClaimOfHomePolicy damageCauser(String damageCauser) {
    this.damageCauser = damageCauser;
    return this;
  }

   /**
   * The person or animal that caused the claim
   * @return damageCauser
  **/
  @Schema(description = "The person or animal that caused the claim")
  public String getDamageCauser() {
    return damageCauser;
  }

  public void setDamageCauser(String damageCauser) {
    this.damageCauser = damageCauser;
  }

  public ClaimOfHomePolicy withdrawalReason(Objekt withdrawalReason) {
    this.withdrawalReason = withdrawalReason;
    return this;
  }

   /**
   * The reason for withdrawing the claim
   * @return withdrawalReason
  **/
  @Schema(description = "The reason for withdrawing the claim")
  public Objekt getWithdrawalReason() {
    return withdrawalReason;
  }

  public void setWithdrawalReason(Objekt withdrawalReason) {
    this.withdrawalReason = withdrawalReason;
  }

  public ClaimOfHomePolicy faultRating(String faultRating) {
    this.faultRating = faultRating;
    return this;
  }

   /**
   * The party that&#x27;s at fault
   * @return faultRating
  **/
  @Schema(description = "The party that's at fault")
  public String getFaultRating() {
    return faultRating;
  }

  public void setFaultRating(String faultRating) {
    this.faultRating = faultRating;
  }

  public ClaimOfHomePolicy closedOutcome(String closedOutcome) {
    this.closedOutcome = closedOutcome;
    return this;
  }

   /**
   * The reason a claim was closed
   * @return closedOutcome
  **/
  @Schema(description = "The reason a claim was closed")
  public String getClosedOutcome() {
    return closedOutcome;
  }

  public void setClosedOutcome(String closedOutcome) {
    this.closedOutcome = closedOutcome;
  }

  public ClaimOfHomePolicy thirdParties(List<ThirdParty> thirdParties) {
    this.thirdParties = thirdParties;
    return this;
  }

  public ClaimOfHomePolicy addThirdPartiesItem(ThirdParty thirdPartiesItem) {
    if (this.thirdParties == null) {
      this.thirdParties = new ArrayList<ThirdParty>();
    }
    this.thirdParties.add(thirdPartiesItem);
    return this;
  }

   /**
   * The list of third parties involved in the claim
   * @return thirdParties
  **/
  @Schema(description = "The list of third parties involved in the claim")
  public List<ThirdParty> getThirdParties() {
    return thirdParties;
  }

  public void setThirdParties(List<ThirdParty> thirdParties) {
    this.thirdParties = thirdParties;
  }

  public ClaimOfHomePolicy staffAppraisers(List<String> staffAppraisers) {
    this.staffAppraisers = staffAppraisers;
    return this;
  }

  public ClaimOfHomePolicy addStaffAppraisersItem(String staffAppraisersItem) {
    if (this.staffAppraisers == null) {
      this.staffAppraisers = new ArrayList<String>();
    }
    this.staffAppraisers.add(staffAppraisersItem);
    return this;
  }

   /**
   * Internal to organization - user name(s) assigned to the incident or object for appraising
   * @return staffAppraisers
  **/
  @Schema(description = "Internal to organization - user name(s) assigned to the incident or object for appraising")
  public List<String> getStaffAppraisers() {
    return staffAppraisers;
  }

  public void setStaffAppraisers(List<String> staffAppraisers) {
    this.staffAppraisers = staffAppraisers;
  }

  public ClaimOfHomePolicy custodians(List<LegalEntityRef> custodians) {
    this.custodians = custodians;
    return this;
  }

  public ClaimOfHomePolicy addCustodiansItem(LegalEntityRef custodiansItem) {
    if (this.custodians == null) {
      this.custodians = new ArrayList<LegalEntityRef>();
    }
    this.custodians.add(custodiansItem);
    return this;
  }

   /**
   * An array of references to the custodians(s) of the vehicle involved in an incident
   * @return custodians
  **/
  @Schema(description = "An array of references to the custodians(s) of the vehicle involved in an incident")
  public List<LegalEntityRef> getCustodians() {
    return custodians;
  }

  public void setCustodians(List<LegalEntityRef> custodians) {
    this.custodians = custodians;
  }

  public ClaimOfHomePolicy adverseParties(List<LegalEntityRef> adverseParties) {
    this.adverseParties = adverseParties;
    return this;
  }

  public ClaimOfHomePolicy addAdversePartiesItem(LegalEntityRef adversePartiesItem) {
    if (this.adverseParties == null) {
      this.adverseParties = new ArrayList<LegalEntityRef>();
    }
    this.adverseParties.add(adversePartiesItem);
    return this;
  }

   /**
   * An array of references to the adverse parties(s) which deemed to have a liability for the subrogation purpose
   * @return adverseParties
  **/
  @Schema(description = "An array of references to the adverse parties(s) which deemed to have a liability for the subrogation purpose")
  public List<LegalEntityRef> getAdverseParties() {
    return adverseParties;
  }

  public void setAdverseParties(List<LegalEntityRef> adverseParties) {
    this.adverseParties = adverseParties;
  }

  public ClaimOfHomePolicy vendors(List<LegalEntityRef> vendors) {
    this.vendors = vendors;
    return this;
  }

  public ClaimOfHomePolicy addVendorsItem(LegalEntityRef vendorsItem) {
    if (this.vendors == null) {
      this.vendors = new ArrayList<LegalEntityRef>();
    }
    this.vendors.add(vendorsItem);
    return this;
  }

   /**
   * An array of references to the vendor(s) companies involved in the claim that are not included in one of the direct role types such as a repairshop or a rental car company
   * @return vendors
  **/
  @Schema(description = "An array of references to the vendor(s) companies involved in the claim that are not included in one of the direct role types such as a repairshop or a rental car company")
  public List<LegalEntityRef> getVendors() {
    return vendors;
  }

  public void setVendors(List<LegalEntityRef> vendors) {
    this.vendors = vendors;
  }

  public ClaimOfHomePolicy pedestrians(List<LegalEntityRefOfPerson> pedestrians) {
    this.pedestrians = pedestrians;
    return this;
  }

  public ClaimOfHomePolicy addPedestriansItem(LegalEntityRefOfPerson pedestriansItem) {
    if (this.pedestrians == null) {
      this.pedestrians = new ArrayList<LegalEntityRefOfPerson>();
    }
    this.pedestrians.add(pedestriansItem);
    return this;
  }

   /**
   * An array of references to the person involved in a claim that is either on a bike or walking rather than travelling in a vehicle
   * @return pedestrians
  **/
  @Schema(description = "An array of references to the person involved in a claim that is either on a bike or walking rather than travelling in a vehicle")
  public List<LegalEntityRefOfPerson> getPedestrians() {
    return pedestrians;
  }

  public void setPedestrians(List<LegalEntityRefOfPerson> pedestrians) {
    this.pedestrians = pedestrians;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClaimOfHomePolicy claimOfHomePolicy = (ClaimOfHomePolicy) o;
    return Objects.equals(this.policy, claimOfHomePolicy.policy) &&
        Objects.equals(this.witnesses, claimOfHomePolicy.witnesses) &&
        Objects.equals(this.reporters, claimOfHomePolicy.reporters) &&
        Objects.equals(this.claimants, claimOfHomePolicy.claimants) &&
        Objects.equals(this.subClaims, claimOfHomePolicy.subClaims) &&
        Objects.equals(this.address, claimOfHomePolicy.address) &&
        Objects.equals(this.reportType, claimOfHomePolicy.reportType) &&
        Objects.equals(this.numberOfVehicles, claimOfHomePolicy.numberOfVehicles) &&
        Objects.equals(this.numberOfThirdParties, claimOfHomePolicy.numberOfThirdParties) &&
        Objects.equals(this.numberOfInjured, claimOfHomePolicy.numberOfInjured) &&
        Objects.equals(this.incidentId, claimOfHomePolicy.incidentId) &&
        Objects.equals(this.flag, claimOfHomePolicy.flag) &&
        Objects.equals(this.compensationType, claimOfHomePolicy.compensationType) &&
        Objects.equals(this.amountRecovered, claimOfHomePolicy.amountRecovered) &&
        Objects.equals(this.amountPaid, claimOfHomePolicy.amountPaid) &&
        Objects.equals(this.status, claimOfHomePolicy.status) &&
        Objects.equals(this.handler, claimOfHomePolicy.handler) &&
        Objects.equals(this.statement, claimOfHomePolicy.statement) &&
        Objects.equals(this.damageAmount, claimOfHomePolicy.damageAmount) &&
        Objects.equals(this.damageList, claimOfHomePolicy.damageList) &&
        Objects.equals(this.damageType, claimOfHomePolicy.damageType) &&
        Objects.equals(this.accidentType, claimOfHomePolicy.accidentType) &&
        Objects.equals(this.liability, claimOfHomePolicy.liability) &&
        Objects.equals(this.cause, claimOfHomePolicy.cause) &&
        Objects.equals(this.amountReserved, claimOfHomePolicy.amountReserved) &&
        Objects.equals(this.reportedDate, claimOfHomePolicy.reportedDate) &&
        Objects.equals(this.occurredDate, claimOfHomePolicy.occurredDate) &&
        Objects.equals(this.claimId, claimOfHomePolicy.claimId) &&
        Objects.equals(this.timeOccurred, claimOfHomePolicy.timeOccurred) &&
        Objects.equals(this.timeReported, claimOfHomePolicy.timeReported) &&
        Objects.equals(this.policeInvolved, claimOfHomePolicy.policeInvolved) &&
        Objects.equals(this.recoveryClaim, claimOfHomePolicy.recoveryClaim) &&
        Objects.equals(this.amountClaimed, claimOfHomePolicy.amountClaimed) &&
        Objects.equals(this.reopenDate, claimOfHomePolicy.reopenDate) &&
        Objects.equals(this.closingDate, claimOfHomePolicy.closingDate) &&
        Objects.equals(this.damageCauser, claimOfHomePolicy.damageCauser) &&
        Objects.equals(this.withdrawalReason, claimOfHomePolicy.withdrawalReason) &&
        Objects.equals(this.faultRating, claimOfHomePolicy.faultRating) &&
        Objects.equals(this.closedOutcome, claimOfHomePolicy.closedOutcome) &&
        Objects.equals(this.thirdParties, claimOfHomePolicy.thirdParties) &&
        Objects.equals(this.staffAppraisers, claimOfHomePolicy.staffAppraisers) &&
        Objects.equals(this.custodians, claimOfHomePolicy.custodians) &&
        Objects.equals(this.adverseParties, claimOfHomePolicy.adverseParties) &&
        Objects.equals(this.vendors, claimOfHomePolicy.vendors) &&
        Objects.equals(this.pedestrians, claimOfHomePolicy.pedestrians) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policy, witnesses, reporters, claimants, subClaims, address, reportType, numberOfVehicles, numberOfThirdParties, numberOfInjured, incidentId, flag, compensationType, amountRecovered, amountPaid, status, handler, statement, damageAmount, damageList, damageType, accidentType, liability, cause, amountReserved, reportedDate, occurredDate, claimId, timeOccurred, timeReported, policeInvolved, recoveryClaim, amountClaimed, reopenDate, closingDate, damageCauser, withdrawalReason, faultRating, closedOutcome, thirdParties, staffAppraisers, custodians, adverseParties, vendors, pedestrians, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClaimOfHomePolicy {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    witnesses: ").append(toIndentedString(witnesses)).append("\n");
    sb.append("    reporters: ").append(toIndentedString(reporters)).append("\n");
    sb.append("    claimants: ").append(toIndentedString(claimants)).append("\n");
    sb.append("    subClaims: ").append(toIndentedString(subClaims)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    numberOfVehicles: ").append(toIndentedString(numberOfVehicles)).append("\n");
    sb.append("    numberOfThirdParties: ").append(toIndentedString(numberOfThirdParties)).append("\n");
    sb.append("    numberOfInjured: ").append(toIndentedString(numberOfInjured)).append("\n");
    sb.append("    incidentId: ").append(toIndentedString(incidentId)).append("\n");
    sb.append("    flag: ").append(toIndentedString(flag)).append("\n");
    sb.append("    compensationType: ").append(toIndentedString(compensationType)).append("\n");
    sb.append("    amountRecovered: ").append(toIndentedString(amountRecovered)).append("\n");
    sb.append("    amountPaid: ").append(toIndentedString(amountPaid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    handler: ").append(toIndentedString(handler)).append("\n");
    sb.append("    statement: ").append(toIndentedString(statement)).append("\n");
    sb.append("    damageAmount: ").append(toIndentedString(damageAmount)).append("\n");
    sb.append("    damageList: ").append(toIndentedString(damageList)).append("\n");
    sb.append("    damageType: ").append(toIndentedString(damageType)).append("\n");
    sb.append("    accidentType: ").append(toIndentedString(accidentType)).append("\n");
    sb.append("    liability: ").append(toIndentedString(liability)).append("\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    amountReserved: ").append(toIndentedString(amountReserved)).append("\n");
    sb.append("    reportedDate: ").append(toIndentedString(reportedDate)).append("\n");
    sb.append("    occurredDate: ").append(toIndentedString(occurredDate)).append("\n");
    sb.append("    claimId: ").append(toIndentedString(claimId)).append("\n");
    sb.append("    timeOccurred: ").append(toIndentedString(timeOccurred)).append("\n");
    sb.append("    timeReported: ").append(toIndentedString(timeReported)).append("\n");
    sb.append("    policeInvolved: ").append(toIndentedString(policeInvolved)).append("\n");
    sb.append("    recoveryClaim: ").append(toIndentedString(recoveryClaim)).append("\n");
    sb.append("    amountClaimed: ").append(toIndentedString(amountClaimed)).append("\n");
    sb.append("    reopenDate: ").append(toIndentedString(reopenDate)).append("\n");
    sb.append("    closingDate: ").append(toIndentedString(closingDate)).append("\n");
    sb.append("    damageCauser: ").append(toIndentedString(damageCauser)).append("\n");
    sb.append("    withdrawalReason: ").append(toIndentedString(withdrawalReason)).append("\n");
    sb.append("    faultRating: ").append(toIndentedString(faultRating)).append("\n");
    sb.append("    closedOutcome: ").append(toIndentedString(closedOutcome)).append("\n");
    sb.append("    thirdParties: ").append(toIndentedString(thirdParties)).append("\n");
    sb.append("    staffAppraisers: ").append(toIndentedString(staffAppraisers)).append("\n");
    sb.append("    custodians: ").append(toIndentedString(custodians)).append("\n");
    sb.append("    adverseParties: ").append(toIndentedString(adverseParties)).append("\n");
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("    pedestrians: ").append(toIndentedString(pedestrians)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
