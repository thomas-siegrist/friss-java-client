/*
 * FRISS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.HashMap;
import java.util.Map;
/**
 * ClaimScreeningRequestOfHealthPolicy
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-03T11:30:23.717Z[GMT]")
public class ClaimScreeningRequestOfHealthPolicy extends AdditionalFieldsBase {
  @SerializedName("parties")
  private Map<String, LegalEntity> parties = null;

  @SerializedName("claim")
  private Objekt claim = null;

  @SerializedName("branch")
  private String branch = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("process")
  private String process = null;

  @SerializedName("externalSource")
  private String externalSource = null;

  @SerializedName("externalScore")
  private Boolean externalScore = null;

  @SerializedName("contactUserId")
  private Objekt contactUserId = null;

  public ClaimScreeningRequestOfHealthPolicy parties(Map<String, LegalEntity> parties) {
    this.parties = parties;
    return this;
  }

  public ClaimScreeningRequestOfHealthPolicy putPartiesItem(String key, LegalEntity partiesItem) {
    if (this.parties == null) {
      this.parties = new HashMap<String, LegalEntity>();
    }
    this.parties.put(key, partiesItem);
    return this;
  }

   /**
   * The parties entity, with a reference assigned to each legal entity in the claim. These references are used in the claim entity to define relations between the parties
   * @return parties
  **/
  @Schema(description = "The parties entity, with a reference assigned to each legal entity in the claim. These references are used in the claim entity to define relations between the parties")
  public Map<String, LegalEntity> getParties() {
    return parties;
  }

  public void setParties(Map<String, LegalEntity> parties) {
    this.parties = parties;
  }

  public ClaimScreeningRequestOfHealthPolicy claim(Objekt claim) {
    this.claim = claim;
    return this;
  }

   /**
   * The claim entity, with a policy and sub-claims. Here it is possible to assign roles to the parties previously defined
   * @return claim
  **/
  @Schema(description = "The claim entity, with a policy and sub-claims. Here it is possible to assign roles to the parties previously defined")
  public Objekt getClaim() {
    return claim;
  }

  public void setClaim(Objekt claim) {
    this.claim = claim;
  }

  public ClaimScreeningRequestOfHealthPolicy branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * The branch to which the insurance claim applies
   * @return branch
  **/
  @Schema(description = "The branch to which the insurance claim applies")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public ClaimScreeningRequestOfHealthPolicy label(String label) {
    this.label = label;
    return this;
  }

   /**
   * The reference to the requesting insurance company or label
   * @return label
  **/
  @Schema(description = "The reference to the requesting insurance company or label")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public ClaimScreeningRequestOfHealthPolicy process(String process) {
    this.process = process;
    return this;
  }

   /**
   * A system parameter for defining the process from which a call to FRISS has been initiated.
   * @return process
  **/
  @Schema(description = "A system parameter for defining the process from which a call to FRISS has been initiated.")
  public String getProcess() {
    return process;
  }

  public void setProcess(String process) {
    this.process = process;
  }

  public ClaimScreeningRequestOfHealthPolicy externalSource(String externalSource) {
    this.externalSource = externalSource;
    return this;
  }

   /**
   * Get externalSource
   * @return externalSource
  **/
  @Schema(description = "")
  public String getExternalSource() {
    return externalSource;
  }

  public void setExternalSource(String externalSource) {
    this.externalSource = externalSource;
  }

  public ClaimScreeningRequestOfHealthPolicy externalScore(Boolean externalScore) {
    this.externalScore = externalScore;
    return this;
  }

   /**
   * Get externalScore
   * @return externalScore
  **/
  @Schema(description = "")
  public Boolean isExternalScore() {
    return externalScore;
  }

  public void setExternalScore(Boolean externalScore) {
    this.externalScore = externalScore;
  }

  public ClaimScreeningRequestOfHealthPolicy contactUserId(Objekt contactUserId) {
    this.contactUserId = contactUserId;
    return this;
  }

   /**
   * The user ID of the assigned contact
   * @return contactUserId
  **/
  @Schema(description = "The user ID of the assigned contact")
  public Objekt getContactUserId() {
    return contactUserId;
  }

  public void setContactUserId(Objekt contactUserId) {
    this.contactUserId = contactUserId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClaimScreeningRequestOfHealthPolicy claimScreeningRequestOfHealthPolicy = (ClaimScreeningRequestOfHealthPolicy) o;
    return Objects.equals(this.parties, claimScreeningRequestOfHealthPolicy.parties) &&
        Objects.equals(this.claim, claimScreeningRequestOfHealthPolicy.claim) &&
        Objects.equals(this.branch, claimScreeningRequestOfHealthPolicy.branch) &&
        Objects.equals(this.label, claimScreeningRequestOfHealthPolicy.label) &&
        Objects.equals(this.process, claimScreeningRequestOfHealthPolicy.process) &&
        Objects.equals(this.externalSource, claimScreeningRequestOfHealthPolicy.externalSource) &&
        Objects.equals(this.externalScore, claimScreeningRequestOfHealthPolicy.externalScore) &&
        Objects.equals(this.contactUserId, claimScreeningRequestOfHealthPolicy.contactUserId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parties, claim, branch, label, process, externalSource, externalScore, contactUserId, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClaimScreeningRequestOfHealthPolicy {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    parties: ").append(toIndentedString(parties)).append("\n");
    sb.append("    claim: ").append(toIndentedString(claim)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    process: ").append(toIndentedString(process)).append("\n");
    sb.append("    externalSource: ").append(toIndentedString(externalSource)).append("\n");
    sb.append("    externalScore: ").append(toIndentedString(externalScore)).append("\n");
    sb.append("    contactUserId: ").append(toIndentedString(contactUserId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
