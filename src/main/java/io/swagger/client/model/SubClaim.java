/*
 * FRISS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * SubClaim
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-03T11:30:23.717Z[GMT]")

public class SubClaim extends AdditionalFieldsAndNotesBase {
  @SerializedName("type")
  private SubClaimType type = null;

  @SerializedName("payees")
  private List<LegalEntityRef> payees = null;

  @SerializedName("experts")
  private List<LegalEntityRefOfCompany> experts = null;

  @SerializedName("employers")
  private List<LegalEntityRefOfCompany> employers = null;

  @SerializedName("reference")
  private String reference = null;

  @SerializedName("calculateSubScore")
  private Boolean calculateSubScore = null;

  @SerializedName("damageAmount")
  private Integer damageAmount = null;

  @SerializedName("status")
  private ClaimStatus status = null;

  @SerializedName("liability")
  private Integer liability = null;

  @SerializedName("timeReported")
  private String timeReported = null;

  @SerializedName("closingDate")
  private OffsetDateTime closingDate = null;

  @SerializedName("reportedDate")
  private OffsetDateTime reportedDate = null;

  @SerializedName("amountPaid")
  private BigDecimal amountPaid = null;

  @SerializedName("amountRecovered")
  private BigDecimal amountRecovered = null;

  @SerializedName("amountReserved")
  private BigDecimal amountReserved = null;

  @SerializedName("amountClaimed")
  private BigDecimal amountClaimed = null;

  @SerializedName("coverages")
  private List<Coverage> coverages = null;

  @SerializedName("damageType")
  private String damageType = null;

  @SerializedName("claimant")
  private LegalEntityRef claimant = null;

  @SerializedName("customType")
  private String customType = null;

  @SerializedName("cashSettlement")
  private Boolean cashSettlement = null;

  @SerializedName("closedOutcome")
  private String closedOutcome = null;

  @SerializedName("reopenDate")
  private OffsetDateTime reopenDate = null;

  @SerializedName("exposureOwners")
  private List<String> exposureOwners = null;

  @SerializedName("independentAdjusters")
  private List<String> independentAdjusters = null;

  @SerializedName("discriminator")
  private String discriminator = null;

  public SubClaim() {
    this.discriminator = this.getClass().getSimpleName();
  }
  public SubClaim type(SubClaimType type) {
    this.type = type;
    return this;
  }

   /**
   * Linked to the Sub Claim entity determine the type of sub claim
   * @return type
  **/
  @Schema(description = "Linked to the Sub Claim entity determine the type of sub claim")
  public SubClaimType getType() {
    return type;
  }

  public void setType(SubClaimType type) {
    this.type = type;
  }

  public SubClaim payees(List<LegalEntityRef> payees) {
    this.payees = payees;
    return this;
  }

  public SubClaim addPayeesItem(LegalEntityRef payeesItem) {
    if (this.payees == null) {
      this.payees = new ArrayList<LegalEntityRef>();
    }
    this.payees.add(payeesItem);
    return this;
  }

   /**
   * An array of references to the payees (of type [LegalEntity](#legalentity)) of the subclaim
   * @return payees
  **/
  @Schema(description = "An array of references to the payees (of type [LegalEntity](#legalentity)) of the subclaim")
  public List<LegalEntityRef> getPayees() {
    return payees;
  }

  public void setPayees(List<LegalEntityRef> payees) {
    this.payees = payees;
  }

  public SubClaim experts(List<LegalEntityRefOfCompany> experts) {
    this.experts = experts;
    return this;
  }

  public SubClaim addExpertsItem(LegalEntityRefOfCompany expertsItem) {
    if (this.experts == null) {
      this.experts = new ArrayList<LegalEntityRefOfCompany>();
    }
    this.experts.add(expertsItem);
    return this;
  }

   /**
   * A reference to a [LegalEntity](#legalentity) (of type [Company](#company)) that represents the expert assigned to a subclaim. For example an engineer for motor vehicle accident reconstruction, or private investigator for a personal injury claim
   * @return experts
  **/
  @Schema(description = "A reference to a [LegalEntity](#legalentity) (of type [Company](#company)) that represents the expert assigned to a subclaim. For example an engineer for motor vehicle accident reconstruction, or private investigator for a personal injury claim")
  public List<LegalEntityRefOfCompany> getExperts() {
    return experts;
  }

  public void setExperts(List<LegalEntityRefOfCompany> experts) {
    this.experts = experts;
  }

  public SubClaim employers(List<LegalEntityRefOfCompany> employers) {
    this.employers = employers;
    return this;
  }

  public SubClaim addEmployersItem(LegalEntityRefOfCompany employersItem) {
    if (this.employers == null) {
      this.employers = new ArrayList<LegalEntityRefOfCompany>();
    }
    this.employers.add(employersItem);
    return this;
  }

   /**
   * A reference to a [LegalEntity](#legalentity) (of type [Company](#company)) that represents the claimants employer. Used for injury claims where claimant is claiming lost wages for example
   * @return employers
  **/
  @Schema(description = "A reference to a [LegalEntity](#legalentity) (of type [Company](#company)) that represents the claimants employer. Used for injury claims where claimant is claiming lost wages for example")
  public List<LegalEntityRefOfCompany> getEmployers() {
    return employers;
  }

  public void setEmployers(List<LegalEntityRefOfCompany> employers) {
    this.employers = employers;
  }

  public SubClaim reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * The unique identifier of the subclaim
   * @return reference
  **/
  @Schema(required = true, description = "The unique identifier of the subclaim")
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public SubClaim calculateSubScore(Boolean calculateSubScore) {
    this.calculateSubScore = calculateSubScore;
    return this;
  }

   /**
   * Get calculateSubScore
   * @return calculateSubScore
  **/
  @Schema(description = "")
  public Boolean isCalculateSubScore() {
    return calculateSubScore;
  }

  public void setCalculateSubScore(Boolean calculateSubScore) {
    this.calculateSubScore = calculateSubScore;
  }

  public SubClaim damageAmount(Integer damageAmount) {
    this.damageAmount = damageAmount;
    return this;
  }

   /**
   * The total value of subclaim related object damages
   * @return damageAmount
  **/
  @Schema(description = "The total value of subclaim related object damages")
  public Integer getDamageAmount() {
    return damageAmount;
  }

  public void setDamageAmount(Integer damageAmount) {
    this.damageAmount = damageAmount;
  }

  public SubClaim status(ClaimStatus status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the subclaim
   * @return status
  **/
  @Schema(description = "The status of the subclaim")
  public ClaimStatus getStatus() {
    return status;
  }

  public void setStatus(ClaimStatus status) {
    this.status = status;
  }

  public SubClaim liability(Integer liability) {
    this.liability = liability;
    return this;
  }

   /**
   * The percentage of liability. In case a percentage is unknown and only a yes-no-flag is available, these should be translated to 0 (not liable) or 100 (liable)
   * @return liability
  **/
  @Schema(description = "The percentage of liability. In case a percentage is unknown and only a yes-no-flag is available, these should be translated to 0 (not liable) or 100 (liable)")
  public Integer getLiability() {
    return liability;
  }

  public void setLiability(Integer liability) {
    this.liability = liability;
  }

  public SubClaim timeReported(String timeReported) {
    this.timeReported = timeReported;
    return this;
  }

   /**
   * The time when the accident was reported Validation: Value should be a valid time in a range between 00:00 and 23:59.
   * @return timeReported
  **/
  @Schema(description = "The time when the accident was reported Validation: Value should be a valid time in a range between 00:00 and 23:59.")
  public String getTimeReported() {
    return timeReported;
  }

  public void setTimeReported(String timeReported) {
    this.timeReported = timeReported;
  }

  public SubClaim closingDate(OffsetDateTime closingDate) {
    this.closingDate = closingDate;
    return this;
  }

   /**
   * The closing date of the subclaim
   * @return closingDate
  **/
  @Schema(description = "The closing date of the subclaim")
  public OffsetDateTime getClosingDate() {
    return closingDate;
  }

  public void setClosingDate(OffsetDateTime closingDate) {
    this.closingDate = closingDate;
  }

  public SubClaim reportedDate(OffsetDateTime reportedDate) {
    this.reportedDate = reportedDate;
    return this;
  }

   /**
   * The date when the subclaim has been reported
   * @return reportedDate
  **/
  @Schema(description = "The date when the subclaim has been reported")
  public OffsetDateTime getReportedDate() {
    return reportedDate;
  }

  public void setReportedDate(OffsetDateTime reportedDate) {
    this.reportedDate = reportedDate;
  }

  public SubClaim amountPaid(BigDecimal amountPaid) {
    this.amountPaid = amountPaid;
    return this;
  }

   /**
   * The amount paid for the subclaim
   * @return amountPaid
  **/
  @Schema(description = "The amount paid for the subclaim")
  public BigDecimal getAmountPaid() {
    return amountPaid;
  }

  public void setAmountPaid(BigDecimal amountPaid) {
    this.amountPaid = amountPaid;
  }

  public SubClaim amountRecovered(BigDecimal amountRecovered) {
    this.amountRecovered = amountRecovered;
    return this;
  }

   /**
   * The amount recovered from a different party for the subclaim
   * @return amountRecovered
  **/
  @Schema(description = "The amount recovered from a different party for the subclaim")
  public BigDecimal getAmountRecovered() {
    return amountRecovered;
  }

  public void setAmountRecovered(BigDecimal amountRecovered) {
    this.amountRecovered = amountRecovered;
  }

  public SubClaim amountReserved(BigDecimal amountReserved) {
    this.amountReserved = amountReserved;
    return this;
  }

   /**
   * The amount reserved for the subclaim
   * @return amountReserved
  **/
  @Schema(description = "The amount reserved for the subclaim")
  public BigDecimal getAmountReserved() {
    return amountReserved;
  }

  public void setAmountReserved(BigDecimal amountReserved) {
    this.amountReserved = amountReserved;
  }

  public SubClaim amountClaimed(BigDecimal amountClaimed) {
    this.amountClaimed = amountClaimed;
    return this;
  }

   /**
   * The amount claimed for the subclaim
   * @return amountClaimed
  **/
  @Schema(description = "The amount claimed for the subclaim")
  public BigDecimal getAmountClaimed() {
    return amountClaimed;
  }

  public void setAmountClaimed(BigDecimal amountClaimed) {
    this.amountClaimed = amountClaimed;
  }

  public SubClaim coverages(List<Coverage> coverages) {
    this.coverages = coverages;
    return this;
  }

  public SubClaim addCoveragesItem(Coverage coveragesItem) {
    if (this.coverages == null) {
      this.coverages = new ArrayList<Coverage>();
    }
    this.coverages.add(coveragesItem);
    return this;
  }

   /**
   * The coverage that is applied for this subclaim
   * @return coverages
  **/
  @Schema(description = "The coverage that is applied for this subclaim")
  public List<Coverage> getCoverages() {
    return coverages;
  }

  public void setCoverages(List<Coverage> coverages) {
    this.coverages = coverages;
  }

  public SubClaim damageType(String damageType) {
    this.damageType = damageType;
    return this;
  }

   /**
   * The type of damage for the subclaim
   * @return damageType
  **/
  @Schema(description = "The type of damage for the subclaim")
  public String getDamageType() {
    return damageType;
  }

  public void setDamageType(String damageType) {
    this.damageType = damageType;
  }

  public SubClaim claimant(LegalEntityRef claimant) {
    this.claimant = claimant;
    return this;
  }

   /**
   * A reference to a [LegalEntity](#legalentity) (of type [Person](#person) or [Company](#company)) that was the claimant for the subclaim
   * @return claimant
  **/
  @Schema(description = "A reference to a [LegalEntity](#legalentity) (of type [Person](#person) or [Company](#company)) that was the claimant for the subclaim")
  public LegalEntityRef getClaimant() {
    return claimant;
  }

  public void setClaimant(LegalEntityRef claimant) {
    this.claimant = claimant;
  }

  public SubClaim customType(String customType) {
    this.customType = customType;
    return this;
  }

   /**
   * The internal subclaim type by the insurance company
   * @return customType
  **/
  @Schema(description = "The internal subclaim type by the insurance company")
  public String getCustomType() {
    return customType;
  }

  public void setCustomType(String customType) {
    this.customType = customType;
  }

  public SubClaim cashSettlement(Boolean cashSettlement) {
    this.cashSettlement = cashSettlement;
    return this;
  }

   /**
   * Boolean value indicating whether there was a cash settlement for this subclaim
   * @return cashSettlement
  **/
  @Schema(description = "Boolean value indicating whether there was a cash settlement for this subclaim")
  public Boolean isCashSettlement() {
    return cashSettlement;
  }

  public void setCashSettlement(Boolean cashSettlement) {
    this.cashSettlement = cashSettlement;
  }

  public SubClaim closedOutcome(String closedOutcome) {
    this.closedOutcome = closedOutcome;
    return this;
  }

   /**
   * The reason a subclaim was closed
   * @return closedOutcome
  **/
  @Schema(description = "The reason a subclaim was closed")
  public String getClosedOutcome() {
    return closedOutcome;
  }

  public void setClosedOutcome(String closedOutcome) {
    this.closedOutcome = closedOutcome;
  }

  public SubClaim reopenDate(OffsetDateTime reopenDate) {
    this.reopenDate = reopenDate;
    return this;
  }

   /**
   * The date at which the subclaim was reopened
   * @return reopenDate
  **/
  @Schema(description = "The date at which the subclaim was reopened")
  public OffsetDateTime getReopenDate() {
    return reopenDate;
  }

  public void setReopenDate(OffsetDateTime reopenDate) {
    this.reopenDate = reopenDate;
  }

  public SubClaim exposureOwners(List<String> exposureOwners) {
    this.exposureOwners = exposureOwners;
    return this;
  }

  public SubClaim addExposureOwnersItem(String exposureOwnersItem) {
    if (this.exposureOwners == null) {
      this.exposureOwners = new ArrayList<String>();
    }
    this.exposureOwners.add(exposureOwnersItem);
    return this;
  }

   /**
   * Internal to organization- user name(s) assigned to the subclaim exposure for claims handling
   * @return exposureOwners
  **/
  @Schema(description = "Internal to organization- user name(s) assigned to the subclaim exposure for claims handling")
  public List<String> getExposureOwners() {
    return exposureOwners;
  }

  public void setExposureOwners(List<String> exposureOwners) {
    this.exposureOwners = exposureOwners;
  }

  public SubClaim independentAdjusters(List<String> independentAdjusters) {
    this.independentAdjusters = independentAdjusters;
    return this;
  }

  public SubClaim addIndependentAdjustersItem(String independentAdjustersItem) {
    if (this.independentAdjusters == null) {
      this.independentAdjusters = new ArrayList<String>();
    }
    this.independentAdjusters.add(independentAdjustersItem);
    return this;
  }

   /**
   * External to the organization - independent adjuster assigned to the exposure for claims handling
   * @return independentAdjusters
  **/
  @Schema(description = "External to the organization - independent adjuster assigned to the exposure for claims handling")
  public List<String> getIndependentAdjusters() {
    return independentAdjusters;
  }

  public void setIndependentAdjusters(List<String> independentAdjusters) {
    this.independentAdjusters = independentAdjusters;
  }

  public SubClaim discriminator(String discriminator) {
    this.discriminator = discriminator;
    return this;
  }

   /**
   * Get discriminator
   * @return discriminator
  **/
  @Schema(required = true, description = "")
  public String getDiscriminator() {
    return discriminator;
  }

  public void setDiscriminator(String discriminator) {
    this.discriminator = discriminator;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubClaim subClaim = (SubClaim) o;
    return Objects.equals(this.type, subClaim.type) &&
        Objects.equals(this.payees, subClaim.payees) &&
        Objects.equals(this.experts, subClaim.experts) &&
        Objects.equals(this.employers, subClaim.employers) &&
        Objects.equals(this.reference, subClaim.reference) &&
        Objects.equals(this.calculateSubScore, subClaim.calculateSubScore) &&
        Objects.equals(this.damageAmount, subClaim.damageAmount) &&
        Objects.equals(this.status, subClaim.status) &&
        Objects.equals(this.liability, subClaim.liability) &&
        Objects.equals(this.timeReported, subClaim.timeReported) &&
        Objects.equals(this.closingDate, subClaim.closingDate) &&
        Objects.equals(this.reportedDate, subClaim.reportedDate) &&
        Objects.equals(this.amountPaid, subClaim.amountPaid) &&
        Objects.equals(this.amountRecovered, subClaim.amountRecovered) &&
        Objects.equals(this.amountReserved, subClaim.amountReserved) &&
        Objects.equals(this.amountClaimed, subClaim.amountClaimed) &&
        Objects.equals(this.coverages, subClaim.coverages) &&
        Objects.equals(this.damageType, subClaim.damageType) &&
        Objects.equals(this.claimant, subClaim.claimant) &&
        Objects.equals(this.customType, subClaim.customType) &&
        Objects.equals(this.cashSettlement, subClaim.cashSettlement) &&
        Objects.equals(this.closedOutcome, subClaim.closedOutcome) &&
        Objects.equals(this.reopenDate, subClaim.reopenDate) &&
        Objects.equals(this.exposureOwners, subClaim.exposureOwners) &&
        Objects.equals(this.independentAdjusters, subClaim.independentAdjusters) &&
        Objects.equals(this.discriminator, subClaim.discriminator) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, payees, experts, employers, reference, calculateSubScore, damageAmount, status, liability, timeReported, closingDate, reportedDate, amountPaid, amountRecovered, amountReserved, amountClaimed, coverages, damageType, claimant, customType, cashSettlement, closedOutcome, reopenDate, exposureOwners, independentAdjusters, discriminator, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubClaim {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    payees: ").append(toIndentedString(payees)).append("\n");
    sb.append("    experts: ").append(toIndentedString(experts)).append("\n");
    sb.append("    employers: ").append(toIndentedString(employers)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    calculateSubScore: ").append(toIndentedString(calculateSubScore)).append("\n");
    sb.append("    damageAmount: ").append(toIndentedString(damageAmount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    liability: ").append(toIndentedString(liability)).append("\n");
    sb.append("    timeReported: ").append(toIndentedString(timeReported)).append("\n");
    sb.append("    closingDate: ").append(toIndentedString(closingDate)).append("\n");
    sb.append("    reportedDate: ").append(toIndentedString(reportedDate)).append("\n");
    sb.append("    amountPaid: ").append(toIndentedString(amountPaid)).append("\n");
    sb.append("    amountRecovered: ").append(toIndentedString(amountRecovered)).append("\n");
    sb.append("    amountReserved: ").append(toIndentedString(amountReserved)).append("\n");
    sb.append("    amountClaimed: ").append(toIndentedString(amountClaimed)).append("\n");
    sb.append("    coverages: ").append(toIndentedString(coverages)).append("\n");
    sb.append("    damageType: ").append(toIndentedString(damageType)).append("\n");
    sb.append("    claimant: ").append(toIndentedString(claimant)).append("\n");
    sb.append("    customType: ").append(toIndentedString(customType)).append("\n");
    sb.append("    cashSettlement: ").append(toIndentedString(cashSettlement)).append("\n");
    sb.append("    closedOutcome: ").append(toIndentedString(closedOutcome)).append("\n");
    sb.append("    reopenDate: ").append(toIndentedString(reopenDate)).append("\n");
    sb.append("    exposureOwners: ").append(toIndentedString(exposureOwners)).append("\n");
    sb.append("    independentAdjusters: ").append(toIndentedString(independentAdjusters)).append("\n");
    sb.append("    discriminator: ").append(toIndentedString(discriminator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
