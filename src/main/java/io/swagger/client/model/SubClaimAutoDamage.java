/*
 * FRISS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;

/**
 * SubClaimAutoDamage
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-03T11:30:23.717Z[GMT]")
public class SubClaimAutoDamage extends SubClaim {
  @SerializedName("vehicle")
  private Objekt vehicle = null;

  @SerializedName("repairer")
  private Objekt repairer = null;

  @SerializedName("surveyor")
  private Objekt surveyor = null;

  @SerializedName("driver")
  private Objekt driver = null;

  @SerializedName("passengers")
  private List<LegalEntityRefOfPerson> passengers = null;

  @SerializedName("damageList")
  private List<String> damageList = null;

  @SerializedName("reasonForUse")
  private String reasonForUse = null;

  @SerializedName("driverRelationToOwner")
  private String driverRelationToOwner = null;

  @SerializedName("ownerPermissionToDrive")
  private Boolean ownerPermissionToDrive = null;

  @SerializedName("towingAgency")
  private Objekt towingAgency = null;

  public SubClaimAutoDamage vehicle(Objekt vehicle) {
    this.vehicle = vehicle;
    return this;
  }

   /**
   * Represents the damaged vehicle of type [Vehicle](#vehicle)
   * @return vehicle
  **/
  @Schema(description = "Represents the damaged vehicle of type [Vehicle](#vehicle)")
  public Objekt getVehicle() {
    return vehicle;
  }

  public void setVehicle(Objekt vehicle) {
    this.vehicle = vehicle;
  }

  public SubClaimAutoDamage repairer(Objekt repairer) {
    this.repairer = repairer;
    return this;
  }

   /**
   * A reference to a [LegalEntity](#legalentity) (of type [Company](#company)) responsible for repairing the vehicle
   * @return repairer
  **/
  @Schema(description = "A reference to a [LegalEntity](#legalentity) (of type [Company](#company)) responsible for repairing the vehicle")
  public Objekt getRepairer() {
    return repairer;
  }

  public void setRepairer(Objekt repairer) {
    this.repairer = repairer;
  }

  public SubClaimAutoDamage surveyor(Objekt surveyor) {
    this.surveyor = surveyor;
    return this;
  }

   /**
   * A reference to a [LegalEntity](#legalentity) (of type [Person](#person)) responsible for surveying the vehicle
   * @return surveyor
  **/
  @Schema(description = "A reference to a [LegalEntity](#legalentity) (of type [Person](#person)) responsible for surveying the vehicle")
  public Objekt getSurveyor() {
    return surveyor;
  }

  public void setSurveyor(Objekt surveyor) {
    this.surveyor = surveyor;
  }

  public SubClaimAutoDamage driver(Objekt driver) {
    this.driver = driver;
    return this;
  }

   /**
   * A reference to a [LegalEntity](#legalentity) (of type [Person](#person)) driving vehicle, mandatory for the SubClaimAutoDamage
   * @return driver
  **/
  @Schema(description = "A reference to a [LegalEntity](#legalentity) (of type [Person](#person)) driving vehicle, mandatory for the SubClaimAutoDamage")
  public Objekt getDriver() {
    return driver;
  }

  public void setDriver(Objekt driver) {
    this.driver = driver;
  }

  public SubClaimAutoDamage passengers(List<LegalEntityRefOfPerson> passengers) {
    this.passengers = passengers;
    return this;
  }

  public SubClaimAutoDamage addPassengersItem(LegalEntityRefOfPerson passengersItem) {
    if (this.passengers == null) {
      this.passengers = new ArrayList<LegalEntityRefOfPerson>();
    }
    this.passengers.add(passengersItem);
    return this;
  }

   /**
   * An list of references to [LegalEntities](#legalentity) (of type [Person](#person)) that were passengers in the vehicle
   * @return passengers
  **/
  @Schema(description = "An list of references to [LegalEntities](#legalentity) (of type [Person](#person)) that were passengers in the vehicle")
  public List<LegalEntityRefOfPerson> getPassengers() {
    return passengers;
  }

  public void setPassengers(List<LegalEntityRefOfPerson> passengers) {
    this.passengers = passengers;
  }

  public SubClaimAutoDamage damageList(List<String> damageList) {
    this.damageList = damageList;
    return this;
  }

  public SubClaimAutoDamage addDamageListItem(String damageListItem) {
    if (this.damageList == null) {
      this.damageList = new ArrayList<String>();
    }
    this.damageList.add(damageListItem);
    return this;
  }

   /**
   * A list of damages to the object
   * @return damageList
  **/
  @Schema(description = "A list of damages to the object")
  public List<String> getDamageList() {
    return damageList;
  }

  public void setDamageList(List<String> damageList) {
    this.damageList = damageList;
  }

  public SubClaimAutoDamage reasonForUse(String reasonForUse) {
    this.reasonForUse = reasonForUse;
    return this;
  }

   /**
   * The reason for using the vehicle at the time of the accident, as provided by the driver of the vehicle
   * @return reasonForUse
  **/
  @Schema(description = "The reason for using the vehicle at the time of the accident, as provided by the driver of the vehicle")
  public String getReasonForUse() {
    return reasonForUse;
  }

  public void setReasonForUse(String reasonForUse) {
    this.reasonForUse = reasonForUse;
  }

  public SubClaimAutoDamage driverRelationToOwner(String driverRelationToOwner) {
    this.driverRelationToOwner = driverRelationToOwner;
    return this;
  }

   /**
   * The relationship of the driver of the vehicle to the owner of the vehicle
   * @return driverRelationToOwner
  **/
  @Schema(description = "The relationship of the driver of the vehicle to the owner of the vehicle")
  public String getDriverRelationToOwner() {
    return driverRelationToOwner;
  }

  public void setDriverRelationToOwner(String driverRelationToOwner) {
    this.driverRelationToOwner = driverRelationToOwner;
  }

  public SubClaimAutoDamage ownerPermissionToDrive(Boolean ownerPermissionToDrive) {
    this.ownerPermissionToDrive = ownerPermissionToDrive;
    return this;
  }

   /**
   * Boolean value indicating whether the driver had permission to use the vehicle at the time of the accident
   * @return ownerPermissionToDrive
  **/
  @Schema(description = "Boolean value indicating whether the driver had permission to use the vehicle at the time of the accident")
  public Boolean isOwnerPermissionToDrive() {
    return ownerPermissionToDrive;
  }

  public void setOwnerPermissionToDrive(Boolean ownerPermissionToDrive) {
    this.ownerPermissionToDrive = ownerPermissionToDrive;
  }

  public SubClaimAutoDamage towingAgency(Objekt towingAgency) {
    this.towingAgency = towingAgency;
    return this;
  }

   /**
   * A reference to a [LegalEntity](#LegalEntity) (of type [Company](#company)) responsible for towing the vehicle
   * @return towingAgency
  **/
  @Schema(description = "A reference to a [LegalEntity](#LegalEntity) (of type [Company](#company)) responsible for towing the vehicle")
  public Objekt getTowingAgency() {
    return towingAgency;
  }

  public void setTowingAgency(Objekt towingAgency) {
    this.towingAgency = towingAgency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubClaimAutoDamage subClaimAutoDamage = (SubClaimAutoDamage) o;
    return Objects.equals(this.vehicle, subClaimAutoDamage.vehicle) &&
        Objects.equals(this.repairer, subClaimAutoDamage.repairer) &&
        Objects.equals(this.surveyor, subClaimAutoDamage.surveyor) &&
        Objects.equals(this.driver, subClaimAutoDamage.driver) &&
        Objects.equals(this.passengers, subClaimAutoDamage.passengers) &&
        Objects.equals(this.damageList, subClaimAutoDamage.damageList) &&
        Objects.equals(this.reasonForUse, subClaimAutoDamage.reasonForUse) &&
        Objects.equals(this.driverRelationToOwner, subClaimAutoDamage.driverRelationToOwner) &&
        Objects.equals(this.ownerPermissionToDrive, subClaimAutoDamage.ownerPermissionToDrive) &&
        Objects.equals(this.towingAgency, subClaimAutoDamage.towingAgency) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vehicle, repairer, surveyor, driver, passengers, damageList, reasonForUse, driverRelationToOwner, ownerPermissionToDrive, towingAgency, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubClaimAutoDamage {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("    repairer: ").append(toIndentedString(repairer)).append("\n");
    sb.append("    surveyor: ").append(toIndentedString(surveyor)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    passengers: ").append(toIndentedString(passengers)).append("\n");
    sb.append("    damageList: ").append(toIndentedString(damageList)).append("\n");
    sb.append("    reasonForUse: ").append(toIndentedString(reasonForUse)).append("\n");
    sb.append("    driverRelationToOwner: ").append(toIndentedString(driverRelationToOwner)).append("\n");
    sb.append("    ownerPermissionToDrive: ").append(toIndentedString(ownerPermissionToDrive)).append("\n");
    sb.append("    towingAgency: ").append(toIndentedString(towingAgency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
