/*
 * FRISS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;

/**
 * LegalEntity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-03T11:30:23.717Z[GMT]")
public class LegalEntity extends AdditionalFieldsBase {
  @SerializedName("referenceId")
  private String referenceId = null;

  @SerializedName("contacts")
  private List<Contact> contacts = null;

  @SerializedName("identifications")
  private List<Identification> identifications = null;

  @SerializedName("bankAccounts")
  private List<BankAccount> bankAccounts = null;

  @SerializedName("address")
  private Address address = null;

  @SerializedName("lawyer")
  private Objekt lawyer = null;

  @SerializedName("lawyers")
  private List<LegalEntityRef> lawyers = null;

  @SerializedName("discriminator")
  private String discriminator = null;

  public LegalEntity() {
    this.discriminator = this.getClass().getSimpleName();
  }
  public LegalEntity referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

   /**
   * Get referenceId
   * @return referenceId
  **/
  @Schema(description = "")
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }

  public LegalEntity contacts(List<Contact> contacts) {
    this.contacts = contacts;
    return this;
  }

  public LegalEntity addContactsItem(Contact contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<Contact>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * An array of contact information objects of a Legal Entity
   * @return contacts
  **/
  @Schema(description = "An array of contact information objects of a Legal Entity")
  public List<Contact> getContacts() {
    return contacts;
  }

  public void setContacts(List<Contact> contacts) {
    this.contacts = contacts;
  }

  public LegalEntity identifications(List<Identification> identifications) {
    this.identifications = identifications;
    return this;
  }

  public LegalEntity addIdentificationsItem(Identification identificationsItem) {
    if (this.identifications == null) {
      this.identifications = new ArrayList<Identification>();
    }
    this.identifications.add(identificationsItem);
    return this;
  }

   /**
   * An array of identifications of a Legal Entity
   * @return identifications
  **/
  @Schema(description = "An array of identifications of a Legal Entity")
  public List<Identification> getIdentifications() {
    return identifications;
  }

  public void setIdentifications(List<Identification> identifications) {
    this.identifications = identifications;
  }

  public LegalEntity bankAccounts(List<BankAccount> bankAccounts) {
    this.bankAccounts = bankAccounts;
    return this;
  }

  public LegalEntity addBankAccountsItem(BankAccount bankAccountsItem) {
    if (this.bankAccounts == null) {
      this.bankAccounts = new ArrayList<BankAccount>();
    }
    this.bankAccounts.add(bankAccountsItem);
    return this;
  }

   /**
   * An array of bank accounts of a Legal Entity
   * @return bankAccounts
  **/
  @Schema(description = "An array of bank accounts of a Legal Entity")
  public List<BankAccount> getBankAccounts() {
    return bankAccounts;
  }

  public void setBankAccounts(List<BankAccount> bankAccounts) {
    this.bankAccounts = bankAccounts;
  }

  public LegalEntity address(Address address) {
    this.address = address;
    return this;
  }

   /**
   * The address of the LegalEntity
   * @return address
  **/
  @Schema(description = "The address of the LegalEntity")
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }

  public LegalEntity lawyer(Objekt lawyer) {
    this.lawyer = lawyer;
    return this;
  }

   /**
   * [Deprecated]
   * @return lawyer
  **/
  @Schema(description = "[Deprecated]")
  public Objekt getLawyer() {
    return lawyer;
  }

  public void setLawyer(Objekt lawyer) {
    this.lawyer = lawyer;
  }

  public LegalEntity lawyers(List<LegalEntityRef> lawyers) {
    this.lawyers = lawyers;
    return this;
  }

  public LegalEntity addLawyersItem(LegalEntityRef lawyersItem) {
    if (this.lawyers == null) {
      this.lawyers = new ArrayList<LegalEntityRef>();
    }
    this.lawyers.add(lawyersItem);
    return this;
  }

   /**
   * An array of references to [LegalEntity](#LegalEntity) acting as a lawyer of the LegalEntity
   * @return lawyers
  **/
  @Schema(description = "An array of references to [LegalEntity](#LegalEntity) acting as a lawyer of the LegalEntity")
  public List<LegalEntityRef> getLawyers() {
    return lawyers;
  }

  public void setLawyers(List<LegalEntityRef> lawyers) {
    this.lawyers = lawyers;
  }

  public LegalEntity discriminator(String discriminator) {
    this.discriminator = discriminator;
    return this;
  }

   /**
   * Get discriminator
   * @return discriminator
  **/
  @Schema(required = true, description = "")
  public String getDiscriminator() {
    return discriminator;
  }

  public void setDiscriminator(String discriminator) {
    this.discriminator = discriminator;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntity legalEntity = (LegalEntity) o;
    return Objects.equals(this.referenceId, legalEntity.referenceId) &&
        Objects.equals(this.contacts, legalEntity.contacts) &&
        Objects.equals(this.identifications, legalEntity.identifications) &&
        Objects.equals(this.bankAccounts, legalEntity.bankAccounts) &&
        Objects.equals(this.address, legalEntity.address) &&
        Objects.equals(this.lawyer, legalEntity.lawyer) &&
        Objects.equals(this.lawyers, legalEntity.lawyers) &&
        Objects.equals(this.discriminator, legalEntity.discriminator) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceId, contacts, identifications, bankAccounts, address, lawyer, lawyers, discriminator, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntity {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    identifications: ").append(toIndentedString(identifications)).append("\n");
    sb.append("    bankAccounts: ").append(toIndentedString(bankAccounts)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    lawyer: ").append(toIndentedString(lawyer)).append("\n");
    sb.append("    lawyers: ").append(toIndentedString(lawyers)).append("\n");
    sb.append("    discriminator: ").append(toIndentedString(discriminator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
