/*
 * FRISS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Coverage;
import io.swagger.client.model.LegalEntityRef;
import io.swagger.client.model.LegalEntityRefOfCompany;
import io.swagger.client.model.LegalEntityRefOfPerson;
import io.swagger.client.model.SubClaim;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * SubClaimMedical
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-03T11:30:23.717Z[GMT]")
public class SubClaimMedical extends SubClaim {
  @SerializedName("patients")
  private List<LegalEntityRefOfPerson> patients = null;

  @SerializedName("pharmacies")
  private List<LegalEntityRef> pharmacies = null;

  public SubClaimMedical patients(List<LegalEntityRefOfPerson> patients) {
    this.patients = patients;
    return this;
  }

  public SubClaimMedical addPatientsItem(LegalEntityRefOfPerson patientsItem) {
    if (this.patients == null) {
      this.patients = new ArrayList<LegalEntityRefOfPerson>();
    }
    this.patients.add(patientsItem);
    return this;
  }

   /**
   * A list of references to [Legal Entities](#legalentity) (of type [Person](#person)) that were patients in the subclaim
   * @return patients
  **/
  @Schema(description = "A list of references to [Legal Entities](#legalentity) (of type [Person](#person)) that were patients in the subclaim")
  public List<LegalEntityRefOfPerson> getPatients() {
    return patients;
  }

  public void setPatients(List<LegalEntityRefOfPerson> patients) {
    this.patients = patients;
  }

  public SubClaimMedical pharmacies(List<LegalEntityRef> pharmacies) {
    this.pharmacies = pharmacies;
    return this;
  }

  public SubClaimMedical addPharmaciesItem(LegalEntityRef pharmaciesItem) {
    if (this.pharmacies == null) {
      this.pharmacies = new ArrayList<LegalEntityRef>();
    }
    this.pharmacies.add(pharmaciesItem);
    return this;
  }

   /**
   * A list of references to [Legal Entities](#legalentity) that were pharmacies in the subclaim
   * @return pharmacies
  **/
  @Schema(description = "A list of references to [Legal Entities](#legalentity) that were pharmacies in the subclaim")
  public List<LegalEntityRef> getPharmacies() {
    return pharmacies;
  }

  public void setPharmacies(List<LegalEntityRef> pharmacies) {
    this.pharmacies = pharmacies;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubClaimMedical subClaimMedical = (SubClaimMedical) o;
    return Objects.equals(this.patients, subClaimMedical.patients) &&
        Objects.equals(this.pharmacies, subClaimMedical.pharmacies) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(patients, pharmacies, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubClaimMedical {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    patients: ").append(toIndentedString(patients)).append("\n");
    sb.append("    pharmacies: ").append(toIndentedString(pharmacies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
